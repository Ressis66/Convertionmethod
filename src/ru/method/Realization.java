package ru.method;


import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class Realization {

  private static String morph(long n, String f1, String f2, String f5) {
    n = Math.abs(n) % 100;
    long n1 = n % 10;
    if (n > 10 && n < 20) return f5;
    if (n1 > 1 && n1 < 5) return f2;
    if (n1 == 1) return f1;
    return f5;
  }

  private int sexHunt(String s ){
    if (s.equals("М")) return 0;
    if (s.equals("Ж"))  return 1;
    else return 2;
  }

  public String sumProp(int nSum, String sGender, String sCase) {
  int sexh = sexHunt(sGender);

    String[][] sex = {
        {"", "один", "два", "три", "четыре", "пять", "шесть", "семь", "восемь", "девять"},
        {"", "одна", "две", "три", "четыре", "пять", "шесть", "семь", "восемь", "девять"},
        {"", "одно", "два", "три", "четыре", "пять", "шесть", "семь", "восемь", "девять"},
    };
    String[] str100 = {"", "сто", "двести", "триста", "четыреста", "пятьсот", "шестьсот", "семьсот", "восемьсот", "девятьсот"};
    String[] str11 = {"", "десять", "одиннадцать", "двенадцать", "тринадцать", "четырнадцать", "пятнадцать", "шестнадцать", "семнадцать", "восемнадцать", "девятнадцать", "двадцать"};
    String[] str10 = {"", "десять", "двадцать", "тридцать", "сорок", "пятьдесят", "шестьдесят", "семьдесят", "восемьдесят", "девяносто"};
    String[][] forms = {
        {"", "", "", "1"},
        {"", "", "", "0"},
        {"тысяча", "тысячи", "тысяч", "1"},
        {"миллион", "миллиона", "миллионов", "0"},
        {"миллиард", "миллиарда", "миллиардов", "0"},
        {"триллион", "триллиона", "триллионов", "0"},

    };

    String[][] sexR = {
        {"", "одного", "двух",  "трех", "четырех", "пяти", "шести", "семи", "восеми", "девяти" },
        {"", "одной", "двух", "трех", "четырех", "пяти", "шести", "семи", "восеми", "девяти"},
        {"", "одного", "двух",  "трех", "четырех", "пяти", "шести", "семи", "восеми", "девяти" },
    };

    String[] str100R = {"", "ста", "двухсот", "трехсот", "четырехсот", "пятисот", "шестисот", "семисот", "восьмисот", "девятисот"};
    String[] str11R = {"", "десяти", "одиннадцати", "двенадцати", "тринадцати", "четырнадцати", "пятнадцати", "шестнадцати", "семнадцати", "восемнадцати", "девятнадцати", "двадцати"};
    String[] str10R = {"", "десяти",  "двадцати", "тридцати", "сорока", "пятидесяти", "шестидесяти", "семидесяти", "восьмидесяти", "девяноста"};
    String[][] formsR ={
        {"", "", "", "1"},
        {"", "", "", "0"},
        {"тысяче", "тысячах", "тысячах", "1"},
        {"миллиона", "миллионов", "миллионов", "0"},
        {"миллиарда", "миллиардов", "миллиардов", "0"},
        {"триллиона", "триллионов", "триллионов", "0"},
    };

    String[][] sexD = {
        {"", "одному", "двум",  "трем", "четырем", "пяти", "шести", "семи", "восеми", "девяти" },
        {"", "одной", "двум", "трем", "четырем", "пяти", "шести", "семи", "восеми", "девяти"},
        {"", "одному", "двум",  "трем", "четырем", "пяти", "шести", "семи", "восеми", "девяти" },
    };

    String[] str100D = {"", "ста", "двумстам", "тремстам", "четыремстам", "пятистам", "шестистам", "семистам", "восьмистам", "девятистам"};
    String[] str11D = {"", "десяти", "одиннадцати", "двенадцати", "тринадцати", "четырнадцати", "пятнадцати", "шестнадцати", "семнадцати", "восемнадцати", "девятнадцати", "двадцати"};
    String[] str10D = {"", "десяти",  "двадцати", "тридцати", "сорока", "пятидесяти", "шестидесяти", "семидесяти", "восьмидесяти", "девяноста"};
    String[][] formsD ={
        {"", "", "", "1"},
        {"", "", "", "0"},
        {"тысяче", "тысячам", "тысячам", "1"},
        {"миллиону", "миллионовам", "миллионам", "0"},
        {"миллиарду", "миллиардам", "миллиардам", "0"},
        {"триллиону", "триллионам", "триллионам", "0"},
    };

    /* переменная, отвечающая за одушевленное/неодушевленное условие в сигнатуре метода не приписана */
    String[][] sexV = {
        {"", "одного", "двух",  "трем", "четырех", "пять", "шесть", "семь", "восемь", "девять" },
        {"", "одну", "двух", "трем", "четырех", "пять", "шесть", "семь", "восемь", "девять"},
        {"", "одного", "двух",  "трем", "четырех", "пять", "шесть", "семь", "восемь", "девять" },
    };
    String[] str100V = {"", "сто", "двести", "триста", "четыреста", "пятьсот", "шестьсот", "семьсот", "восемьсот", "девятьсот"};
    String[] str11V = {"", "десять", "одиннадцать", "двенадцать", "тринадцать", "четырнадцать", "пятнадцать", "шестнадцать", "семнадцать", "восемнадцать", "девятнадцать", "двадцать"};
    String[] str10V = {"", "десять", "двадцать", "тридцать", "сорок", "пятьдесят", "шестьдесят", "семьдесят", "восемьдесят", "девяносто"};
    String[][] formsV = {
        {"", "", "", "1"},
        {"", "", "", "0"},
        {"тысячу", "тысячи", "тысяч", "1"},
        {"миллион", "миллиона", "миллионов", "0"},
        {"миллиард", "миллиарда", "миллиардов", "0"},
        {"триллион", "триллиона", "триллионов", "0"},

    };

    String[][] sexT = {
        {"", "одним", "двумя",  "тремя", "четырьмя", "пятью", "шестью", "семью", "восемью", "девятью" },
        {"", "одной", "двумя", "тремя", "четырьмя", "пяти", "шести", "семи", "восеми", "девяти"},
        {"", "одним", "двумя",  "тремя", "четырьмя", "пятью", "шестью", "семью", "восемью", "девятью" },
    };

    String[] str100T = {"", "ста", "двумястами", "тремястами", "четырьмястами", "пятьюстами", "шестьюстами", "семьюстами", "восемьюстами", "девятьюстами"};
    String[] str11T = {"", "десятью", "одиннадцатью", "двенадцатью", "тринадцатью", "четырнадцатью", "пятнадцатью", "шестнадцатью", "семнадцатью", "восемнадцатью", "девятнадцатью", "двадцатью"};
    String[] str10T = {"", "десятью",  "двадцатью", "тридцатью", "сорока", "пятьюдесятью", "шестьюдесятью", "семьюесятью", "восьмьюдесятью", "девяноста"};
    String[][] formsT ={
        {"", "", "", "1"},
        {"", "", "", "0"},
        {"тысячей", "тысячами", "тысячами", "1"},
        {"миллионом", "миллионами", "миллионами", "0"},
        {"миллиардом", "миллиардами", "миллиардами", "0"},
        {"триллионом", "триллионами", "триллионами", "0"},
    };

    String[][] sexP = {
        {"", "одном", "двух",  "трех", "четырех",  "пяти", "шести", "семи", "восеми", "девяти" },
        {"", "одной", "двух", "трех", "четырех", "пяти", "шести", "семи", "восеми", "девяти"},
        {"", "одном", "двух",  "трех", "четырех",  "пяти", "шести", "семи", "восеми", "девяти" },
    };

    String[] str100P = {"", "ста", "двухстах", "трехстах", "четырехстах", "пятистах", "шестистах", "семистах", "восьмистах", "девятистах"};
    String[] str11P = {"", "десяти", "одиннадцати", "двенадцати", "тринадцати", "четырнадцати", "пятнадцати", "шестнадцати", "семнадцати", "восемнадцати", "девятнадцати", "двадцати"};
    String[] str10P = {"", "десяти",  "двадцати", "тридцати", "сорока", "пятидесяти", "шестидесяти", "семидесяти", "восьмидесяти", "девяноста"};
    String[][] formsP ={
        {"", "", "", "1"},
        {"", "", "", "0"},
        {"тысяче", "тысячах", "тысячах", "1"},
        {"миллионе", "миллионах", "миллионах", "0"},
        {"миллиарде", "миллиардах", "миллиардах", "0"},
        {"триллионе", "триллионах", "триллионах", "0"},
    };

    int rub_tmp = nSum;

    List<Integer> segments = new ArrayList<>();
    while (rub_tmp > 999) {
      int seg = rub_tmp / 1000;
      try {
        segments.add(rub_tmp - (seg * 1000));
      } catch (Exception e){ e.printStackTrace();}
      rub_tmp = seg;
    }
    try {
      segments.add(rub_tmp);
    } catch (Exception e){ e.printStackTrace();}
    Collections.reverse(segments);
    StringBuilder s = new StringBuilder();
    if (nSum == 0) {
      switch (sCase) {
        case "И":
          s.append("ноль");
          break;
        case "Р":
          s.append("ноля");
          break;
        case "Д":
          s.append("нолю");
          break;
        case "В":
          s.append("ноль");
          break;
        case "Т":
          s.append("нолем");
          break;
        case "П":
          s.append("ноле");
          break;
        default:
          System.out.println("Something is wrong!!!");
          break;
      }
    }
    else if(nSum>0) {
      switch (sCase) {
        case "И":
          extracted(sexh, sex, str100, str11, str10, forms, segments, s);
          break;
        case "Р":
            extracted(sexh, sexR, str100R, str11R, str10R, formsR, segments, s);
          break;
        case "Д":
            extracted(sexh, sexD, str100D, str11D, str10D, formsD, segments, s);
          break;
        case "В":
            extracted(sexh, sexV, str100V, str11V, str10V, formsV, segments, s);
          break;
        case "Т":
            extracted(sexh, sexT, str100T, str11T, str10T, formsT, segments, s);
          break;
        case "П":
            extracted(sexh, sexP, str100P, str11P, str10P, formsP, segments, s);
          break;
        default:
          System.out.println("Something is wrong!!!");
          break;
      }
    }

    return s.toString();

  }

  private void extracted(int sexh, String[][] sex, String[] str100, String[] str11,
                         String[] str10, String[][] form, List<Integer> segments, StringBuilder s) {
    int lev = segments.size();
    for (int i= 0; i<segments.size(); i++ ) {

      int ri = Integer.parseInt( segments.get(i).toString());
      int sexi = Integer.parseInt( form[lev][3]);

      if (ri== 0 && lev>1) {
        lev--;
        continue;
      }
      String rs = String.valueOf(ri);

      if (rs.length()==1) rs = "00"+rs;
      if (rs.length()==2) rs = "0"+rs;
      int r1 = Integer.parseInt( rs.substring(0,1) ); //первая цифра
      int r2 = Integer.parseInt( rs.substring(1,2) ); //вторая
      int r3 = Integer.parseInt( rs.substring(2,3) ); //третья
      int r22= Integer.parseInt( rs.substring(1,3) );

        if (ri > 99) s.append(str100[r1]).append(" "); // Сотни
        if (r22 > 20) {// >20
          s.append(str10[r2]).append(" ");
          if(lev!=1) s.append(sex[sexi][r3]).append(" ");
          else s.append(sex[sexh][r3]).append(" ");
          } else { // <=20
          if (r22 > 9) s.append(str11[r22 - 9]).append(" "); // 10-20
          if(r22>9&&lev==1) s.append(sex[sexh][r3]).append(" ");
          else if(r22<=9&&lev!=1)s.append(sex[sexi][r3]).append(" ");
        }

        s.append(morph(ri, form[lev][ 0], form[lev][1], form[lev][2])).append(" ");
        lev--;

      }
  }

}

